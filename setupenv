#!/bin/sh

# XXX:
# - lib/ and lib/pkgconfig/ directories are fixed path?
# TODO:
# - Write man file?

true=:
false=/bin/false


cmd_help() {
    progname="$(basename "$0")"
    cat <<EOM
    USAGE

        $progname {command} [args ...]

    SYNOPSIS

        $ setupenv show
        Not in env.
        $ setupenv list    # No output
        $ setupenv shell /opt/*    # Add /opt/*/lib to \$LD_LIBRARY_PATH, etc.
        spawning new shell(/bin/zsh)...
        $ # New shell started.

        $ setupenv show
        4069262909: /opt/atk-1.30.0/ /opt/gdk-pixbuf-2.22.0/ /opt/glib-2.27.0/ /opt/gtk+-2.20.0/

        $ setupenv list    # List all env(s).
        4069262909: /opt/atk-1.30.0/ /opt/gdk-pixbuf-2.22.0/ /opt/glib-2.27.0/ /opt/gtk+-2.20.0/

        $ setupenv create-bundle gtk+    # Bundle current env.
        $ setupenv create-bundle gtk+ /opt/*    # Same

        $ setupenv list-bundle
        gtk+: /opt/atk-1.30.0/ /opt/gdk-pixbuf-2.22.0/ /opt/glib-2.27.0/ /opt/gtk+-2.20.0/

        $ exit    # Exit current env.

        $ setupenv bundle gtk+
        spawning new shell(/bin/zsh)...
        $ setupenv show
        4256928019: /opt/atk-1.30.0/ /opt/gdk-pixbuf-2.22.0/ /opt/glib-2.27.0/ /opt/gtk+-2.20.0/

    COMMANDS

        help
            Show help.

        shell proj_dir [proj_dir2 ...]
            Add some paths to specific environment variables and set up new shell.

        list
            List all env(s).

        bundle bundle_name [bundle_name2 ...]
            Expand bundle names and exec "shell" command.

        create-bundle [-f] [bundle_name [proj_dir ...]]
            Create a bundle.

        list-bundle
            List bundles.

        remove-bundle bundle_name
            Remove bundle.

        show
            Show the status whether I'm in env.

    FILES

        ~/.setupenv/bundle/*
            Saved bundles.
EOM
    exit 1
}

create_lock_dir() {
    local dir="/tmp/setupenv"
    mkdir -p $dir
    if [ ! -d $dir ]; then
        echo "Can't create lock dir: $dir" >&2
        exit 1
    fi
}

get_lock_file() {
    echo "/tmp/setupenv/$1"
}

get_lock_id() {
    local id file
    while $true; do
        # Trim whitespaces which od outputs.
        id="$(echo $(od -vAn -N4 -tu4 < /dev/urandom))"
        file=`get_lock_file "$id"`
        [ ! -e "$file" ] && break
    done
    echo "$id"
}

get_all_lock_ids() {
    local dir="/tmp/setupenv"
    if [ ! -d $dir ]; then
        echo "get_all_lock_ids: No lock dir exists: $dir"
        exit 1
    fi

    [ -z "$(ls /tmp/setupenv)" ] && return

    local file
    for file in /tmp/setupenv/*; do
        echo "$(basename "$file")"
    done
}

cmd_shell() {
    local changed=$false

    if [ ! -z "$SETUPENV_ID" ]; then
        # In env
        local file="$(get_lock_file "$SETUPENV_ID")"
        echo "Already in env: $(cat "$file")" >&2
        exit 1
    fi

    for dir in "$@"; do
        [ -d "$dir" ] || continue

        if [ -d "$dir/bin"  ]; then
            if [ -z "$PATH" ]; then
                export PATH="$dir/bin"
            else
                export PATH="$dir/bin:$PATH"
            fi
            changed=$true
        fi

        if [ -d "$dir/lib" ]; then
            if [ -z "$LD_LIBRARY_PATH" ]; then
                export LD_LIBRARY_PATH="$dir/lib"
            else
                export LD_LIBRARY_PATH="$dir/lib:$LD_LIBRARY_PATH"
            fi
            sudo ldconfig
            changed=$true
        fi

        if [ -d "$dir/lib/pkgconfig" ]; then
            if [ -z "$PKG_CONFIG_PATH" ]; then
                export PKG_CONFIG_PATH="$dir/lib/pkgconfig"
            else
                export PKG_CONFIG_PATH="$dir/lib/pkgconfig:$PKG_CONFIG_PATH"
            fi
            changed=$true
        fi
    done

    if $changed; then
        echo "spawning new shell($SHELL)..."

        export SETUPENV_ID="`get_lock_id`"

        create_lock_dir
        local file="`get_lock_file "$SETUPENV_ID"`"
        echo "$*" >"$file" || {
            echo "Could not write to '$file'." >&2
            exit 1
        }

        # Finalizations
        trap "rm -f '$file'" 0 HUP INT QUIT TERM
        trap "sudo ldconfig" 0 HUP INT QUIT TERM
        trap "exit $?" 0 HUP INT QUIT TERM

        $SHELL

        rm -f "$file"
        sudo ldconfig
    else
        echo "No lib/ dir(s) found. exit." >&2
        exit 1
    fi
}

cmd_list() {
    local ids="$(get_all_lock_ids)"
    [ -z "$ids" ] && return

    local id file
    for id in "$ids"; do
        local file="$(get_lock_file "$id")"
        echo "$id: $(cat "$file")"
    done
}

cmd_show() {
    if [ -z "$SETUPENV_ID" ]; then
        # In env
        echo "Not in env." >&2
        return 1
    else
        local file=`get_lock_file "$SETUPENV_ID"`
        echo "$SETUPENV_ID: $(cat "$file")"
        return 0
    fi
}

cmd_create_bundle() {
    local force=$false
    if [ $# -ne 0 -a "$1" = "-f" ]; then
        force=$true
        shift
    fi

    local dest_dir="$HOME/.setupenv/bundle"
    case $# in
        0|1)
            if [ -z "$SETUPENV_ID" ]; then
                # Not in env
                echo "error: create-bundle: proj_dir(s) are omitted but not in env." >&2
                echo "Usage: create-bundle [-f] [bundle_name [proj_dir ...]]" >&2
                exit 1
            fi

            local src="$(get_lock_file "$SETUPENV_ID")"
            if [ $# -eq 0 ]; then
                local bundle_name="$(basename "$src")"
            else
                local bundle_name="$1"
            fi
            local dest="$dest_dir/$bundle_name"
            if [ -e "$dest" ] && ! $force; then
                echo "error: path '$dest' already exists." >&2
                exit 1
            fi

            cp "$src" "$dest"
            echo "Created bundle '$bundle_name': $(cat "$dest")"
            ;;
        *)
            local bundle_name="$1"
            shift
            local dest="$dest_dir/$bundle_name"

            if [ -e "$dest" ] && ! $force; then
                echo "error: path '$dest' already exists." >&2
                exit 1
            fi

            echo "$*" >"$dest" || {
                echo "Could not write to '$dest'." >&2
                exit 1
            }
            echo "Created bundle '$bundle_name': $(cat "$dest")"
            ;;
    esac
}

expand_bundle() {
    local bundle="$1"
    if [ -f "$HOME/.setupenv/bundle/$bundle" ]; then
        cat "$HOME/.setupenv/bundle/$bundle"
    else
        echo "$bundle"
    fi
}

cmd_bundle() {
    [ $# -eq 0 ] && return

    local bundle shell_args
    for bundle in "$@"; do
        shell_args=" $(expand_bundle "$bundle")"
    done

    # NOTE: $shell_args is separated by whitespaces.
    cmd_shell $shell_args
}

cmd_list_bundle() {
    local bundle
    for bundle in $(ls "$HOME/.setupenv/bundle"); do
        echo "$bundle: $(cat "$HOME/.setupenv/bundle/$bundle")"
    done
}

cmd_remove_bundle() {
    [ $# -eq 0 ] && return
    local bundle="$1"
    local file="$HOME/.setupenv/bundle/$bundle"

    if [ ! -f "$file" ]; then
        echo "$bundle: No such bundle." >&2
        exit 1
    fi

    echo "Removed bundle $bundle: $(cat "$file")"
    rm "$file"
}

create_config_dir() {
    local dir
    for dir in "$HOME/.setupenv" "$HOME/.setupenv/bundle"; do
        mkdir -p "$dir"
        if [ ! -d "$dir" ]; then
            echo "Can't create config dir: $dir" >&2
            exit 1
        fi
    done
}

escape_subcmd() {
    local i
    local old_ifs="$IFS"
    local firsttime=$true
    IFS=-
    for i in $1; do
        $firsttime || echo -n _
        firsttime=$false
        echo -n "$i"
    done
    IFS="$old_ifs"
}



[ $# -eq 0 ] && cmd_help

subcmd="$1"
escaped=`escape_subcmd "$1"`
shift

if type "cmd_$escaped" >/dev/null 2>&1; then
    create_config_dir
    "cmd_$escaped" "$@"
elif which "setupenv-$subcmd"; then
    create_config_dir
    "setupenv-$subcmd" "$@"
else
    echo "error: Unknown command: $subcmd" >&2
    sleep 1
    echo
    cmd_help
fi
